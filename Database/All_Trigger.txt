CREATE OR REPLACE TRIGGER USER_PROFILE_INFO_trigger
 AFTER INSERT
 ON USERS
 FOR EACH ROW
 BEGIN
 INSERT INTO USER_PROFILE_INFO(USER_ID, USER_NAME, GMAIL) VALUES(:NEW.USER_ID,:NEW.USERNAME,:NEW.GMAIL);
 DBMS_OUTPUT.PUT_LINE('IN USER_PROFILE_INFO');
 END;
/


CREATE OR REPLACE TRIGGER PUBLIC_INFO_trigger
AFTER INSERT
ON USERS
FOR EACH ROW
BEGIN
INSERT INTO PUBLIC_INFO(USER_NAME) VALUES(:NEW.USERNAME);
 DBMS_OUTPUT.PUT_LINE('IN PUBLIC_INFO');
END;
/
  
CREATE OR REPLACE TRIGGER LOG_TABLE_trigger
AFTER INSERT
ON USERS
FOR EACH ROW
BEGIN
INSERT INTO LOG_TABLE(USER_NAME,ACTIVITY) VALUES(:NEW.USERNAME,'A user registered');
 DBMS_OUTPUT.PUT_LINE('IN LOG_TABLE');
END;
/

CREATE OR REPLACE PROCEDURE SHOW_DETAILED_ERRORS(FNAME IN VARCHAR2) IS
 ERROR_COUNT NUMBER; SPACES NUMBER;
 BEGIN 
  SELECT COUNT(*) INTO ERROR_COUNT
 FROM USER_ERRORS  WHERE NAME = FNAME;
  IF ERROR_COUNT = 0 THEN 
   RETURN;
   END IF;
  
 SPACES := 1; 
 FOR i IN 1..SPACES LOOP 
   DBMS_OUTPUT.PUT_LINE('');
   END LOOP;
  DBMS_OUTPUT.PUT_LINE('Errors: ');
  FOR i IN 1..SPACES
 LOOP  
  DBMS_OUTPUT.PUT_LINE('');  
 END LOOP; 
 FOR R IN (SELECT * FROM USER_ERRORS WHERE NAME = FNAME) LOOP 
   DBMS_OUTPUT.PUT_LINE('Error at '  R."TYPE"  ' '  FNAME  ' Sequence '  R.SEQUENCE  ' Line '  R.LINE  ' Position '  R.POSITION  '    -    ' || R.TEXT);
   END LOOP;
 EXCEPTION 
 WHEN OTHERS THEN 
  DBMS_OUTPUT.PUT_LINE('Unknown Error Occurred'); 
END;/
DECLARE 
  
 BEGIN 
  SHOW_DETAILED_ERRORS('PUBLIC_INFO_trigger');
 END;
/

INSERT INTO USERS (USER_ID, USERNAME, GMAIL, PASSWORD) VALUES (10, 'amimetaly', 'amimetaly@gmail.com', 'password1234');